#!/usr/bin/env python

"""Canary for syslog.

This program will try to connect to /dev/log and if fails to do so in
a timely fashion, it will restart the syslog daemon.

On Linux, /dev/log can either be SOCK_DGRAM or SOCK_STREAM socket. In
both case, the transport is reliable and when the reader is blocked,
writing to it will block. This means that if the syslog daemon is
blocked, you can lock out your entire system.

"""

from __future__ import print_function
from __future__ import unicode_literals

import os
import sys
import socket
import argparse
import logging
import time
import errno
import select
import subprocess

logger = logging.getLogger("syslog-canary")

# Monotonic time
try:
    monotonic = time.monotonic
except AttributeError:
    try:
        from monotonic import monotonic
    except ImportError:
        if not sys.platform.startswith('linux'):
            raise RuntimeError("no monotonic clock available "
                               "(pip install monotonic)")

        def monotonic():
            import ctypes
            import ctypes.util
            try:
                clock_gettime = ctypes.CDLL(ctypes.util.find_library('c'),
                                            use_errno=True).clock_gettime
            except AttributeError:
                clock_gettime = ctypes.CDLL(ctypes.util.find_library('rt'),
                                            use_errno=True).clock_gettime

            class timespec(ctypes.Structure):
                """Time specification, as described in clock_gettime(3)."""
                _fields_ = (('tv_sec', ctypes.c_long),
                            ('tv_nsec', ctypes.c_long))

            ts = timespec()
            if clock_gettime(1, ctypes.pointer(ts)):
                errno = ctypes.get_errno()
                raise OSError(errno, os.strerror(errno))
            return ts.tv_sec + ts.tv_nsec / 1.0e9


def parse(args):
    """Parse arguments."""
    parser = argparse.ArgumentParser(
        description=sys.modules[__name__].__doc__,
        formatter_class=argparse.RawDescriptionHelpFormatter)

    g = parser.add_mutually_exclusive_group()
    g.add_argument("--debug", "-d", action="store_true",
                   default=False,
                   help="enable debugging")
    g.add_argument("--silent", "-s", action="store_true",
                   default=False,
                   help="only log errors")
    parser.add_argument("--log", "-l", metavar="PATH",
                        help="path to log socket",
                        default="/dev/log")
    parser.add_argument("--frequency", "-f", metavar="SECONDS", type=int,
                        help="frequency check in seconds", default=30)
    parser.add_argument("--timeout", "-t", metavar="SECONDS", type=int,
                        help="timeout in seconds", default=5)
    parser.add_argument("command", nargs="+",
                        help="command to execute on failure")

    return parser.parse_args(args)


def setup_logging(debug, silent):
    """Setup logger."""
    logger.setLevel(debug and logging.DEBUG or
                    silent and logging.WARN or
                    logging.INFO)
    ch = logging.StreamHandler()
    ch.setFormatter(logging.Formatter(
        "%(levelname)s[%(name)s] %(message)s"))
    logger.addHandler(ch)


def check(path, timeout, command):
    """Check if /dev/log is working as expected."""
    s = socket.socket(socket.AF_UNIX, socket.SOCK_DGRAM)
    try:
        logger.debug("Connecting to {}".format(path))
        s.setblocking(0)
        err = s.connect_ex(path)
        if err != 0:
            logger.debug("Connect result is {}".format(errno.errorcode[err]))
        else:
            logger.debug("Connection successful")
        if err != 0:
            if err != errno.EINPROGRESS:
                raise RuntimeError("Cannot connect to {}: {}".format(
                    path, os.strerror(err)))
            else:
                logger.debug("Waiting for connection...")
                r, w, x = select.select([], [s], [], timeout)
                if not any([r, w, x]):
                    logger.warn("Timeout when connecting to {}".format(path))
                    logger.info("Executing {}".format(" ".join(command)))
                    subprocess.check_call(command)
                elif w:
                    logger.debug("Checking error condition on socket...")
                    err = s.getsockopt(socket.SOL_SOCKET, socket.SO_ERROR)
                    if err:
                        raise RuntimeError("Cannot connect to {}: {}".format(
                            path, os.strerror(err)))
        logger.debug("Waiting for write condition...")
        r, w, x = select.select([], [s], [], timeout)
        if not any([r, w, x]):
            logger.warn("Timeout when writing to {}".format(path))
            logger.info("Executing {}".format(" ".join(command)))
            subprocess.check_call(command)
        else:
            logger.debug("Can now write to socket")
    finally:
        logger.debug("Closing socket")
        s.close()


def main(args):
    options = parse(args)
    setup_logging(options.debug, options.silent)
    while True:
        try:
            now = monotonic()
            try:
                check(options.log, options.timeout, options.command)
            except Exception as e:
                logger.exception("Uncatched exception: %s", e)
            elapsed = monotonic() - now
            remaining = options.frequency - elapsed
            if remaining > 0:
                logger.debug("Sleeping for {}".format(remaining))
                time.sleep(remaining)
        except KeyboardInterrupt:
            logger.info("Exiting...")
            sys.exit(0)


if __name__ == "__main__":
    main(sys.argv[1:])
